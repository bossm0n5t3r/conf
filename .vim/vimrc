" =========================================================================
" .vimrc
" =========================================================================

" Vim 8 defaults

unlet! skip_defaults_vim
silent! source $VIMRUNTIME/defaults.vim

" =========================================================================
"  VIM-PLUG
" =========================================================================

silent! if plug#begin('~/.vim/plugged')

Plug 'jiangmiao/auto-pairs'
Plug 'junegunn/goyo.vim'
Plug 'yggdroot/indentline'
Plug 'fwcd/kotlin-language-server'
Plug 'udalov/kotlin-vim'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'scrooloose/syntastic'
Plug 'sirver/ultisnips'
Plug 'godlygeek/tabular'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'fatih/vim-go'
Plug 'plasticboy/vim-markdown'
Plug 'terryma/vim-multiple-cursors'
Plug 'honza/vim-snippets'

" Colors
Plug 'nanotech/jellybeans.vim'

call plug#end()
endif

" =========================================================================
" Plugin SETTINGS
" =========================================================================

" Indentline

let g:indentLine_leadingSpaceEnabled = 1
let g:indentLine_leadingSpaceChar = 'Â·'

" -------------------------------------------------------------------------

" NERD Commenter

" Add spaces after comment delimiters by default
let g:NERDSpaceDelims = 1
" Use compact syntax for prettified multi-line comments
let g:NERDCompactSexyComs = 1
" Align line-wise comment delimiters flush left instead of following code indentation
let g:NERDDefaultAlign = 'left'
" Set a language to use its alternate delimiters by default
let g:NERDAltDelims_java = 1
" Add your own custom formats or override the defaults
let g:NERDCustomDelimiters = { 'c': { 'left': '/**','right': '*/' } }
" Allow commenting and inverting empty lines (useful when commenting a region)
let g:NERDCommentEmptyLines = 1
" Enable trimming of trailing whitespace when uncommenting
let g:NERDTrimTrailingWhitespace = 1

" -------------------------------------------------------------------------

" Syntastic

set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" -------------------------------------------------------------------------

" Ultisnips

" Trigger configuration
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
" If you want :UltiSnipsEdit to split your window
let g:UltiSnipsEditSplit="vertical"

" -------------------------------------------------------------------------

" vim-airline

let g:airline#extensions#tabline#enabled = 1

" -------------------------------------------------------------------------

" vim-markdown

let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_new_list_item_indent = 2

" -------------------------------------------------------------------------

" vim-multiple-cursors

let g:multi_cursor_use_default_mapping=0
" Default mapping
let g:multi_cursor_start_word_key      = '<C-n>'
let g:multi_cursor_select_all_word_key = '<A-n>'
let g:multi_cursor_start_key           = 'g<C-n>'
let g:multi_cursor_select_all_key      = 'g<A-n>'
let g:multi_cursor_next_key            = '<C-n>'
let g:multi_cursor_prev_key            = '<C-p>'
let g:multi_cursor_skip_key            = '<C-x>'
let g:multi_cursor_quit_key            = '<Esc>'

" -------------------------------------------------------------------------

" Jellybeans

let g:jellybeans_overrides = {
\    'Todo': { 'guifg': '303030', 'guibg': 'f0f000',
\              'ctermfg': 'Black', 'ctermbg': 'Yellow',
\              'attr': 'bold' },
\    'Comment': { 'guifg': 'cccccc' },
\    'background': { 'guibg': '000000' },
\}

colorscheme jellybeans

" =========================================================================
" BASIC SETTINGS
" =========================================================================

let mapleader       =','
let maplocalleader  =','

" -------------------------------------------------------------------------

set nocompatible
set path+=**
set wildmenu
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set number
set autoindent
set cindent
set showmatch
set incsearch
set hlsearch
set cursorline
set laststatus=2
set backspace=indent,eol,start
set encoding=utf-8
set mouse=a
set clipboard=unnamed

" =========================================================================
" MAPPINGS
" =========================================================================

" Open new line below and above current line

nnoremap <leader>o o<ESC>
nnoremap <leader>O O<ESC>

" -------------------------------------------------------------------------

" Buffers

nnoremap ]b :bnext<CR>
nnoremap [b :bprev<CR>
nnoremap <silent> <leader><Enter>  :buffers<CR>:buffer<Space>
nnoremap <leader>e :edit<Space>

" -------------------------------------------------------------------------

" Enhanced keyboard mappings

" in normal mode F2 will save the file
nmap <F2> :w<CR>
" in insert mode F2 will exit insert, save the file
imap <F2> <ESC>:w<CR>
" in normal mode F3 will save and exit the file
nmap <F3> :wq<CR>
" in insert mode F3 will exit insert, save and exit
imap <F3> <ESC>:wq<CR>

" -------------------------------------------------------------------------

" Goyo

nmap <F4> :Goyo<CR>

" -------------------------------------------------------------------------

" NERDTree Toggle

nmap <F5> :NERDTreeToggle<CR>

" -------------------------------------------------------------------------

" vim-plug

nmap <F6> :PlugClean<CR>
nmap <F7> :PlugUpdate<CR>

" -------------------------------------------------------------------------

" Syntastic

" Close error window
nnoremap <silent> <C-l> :lclose<CR>

" -------------------------------------------------------------------------
" <F8> | Color scheme selector
" -------------------------------------------------------------------------

function! s:colors(...)
  return filter(map(filter(split(globpath(&rtp, 'colors/*.vim'), "\n"),
        \                  'v:val !~ "^/usr/"'),
        \           'fnamemodify(v:val, ":t:r")'),
        \       '!a:0 || stridx(v:val, a:1) >= 0')
endfunction

function! s:rotate_colors()
  if !exists('s:colors')
    let s:colors = s:colors()
  endif
  let name = remove(s:colors, 0)
  call add(s:colors, name)
  execute 'colorscheme' name
  redraw
  echo name
endfunction

nnoremap <silent> <F8> :call <SID>rotate_colors()<cr>
